package com.axr.ghosts;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * Hosts 服务类，负责解析域名、生成和写入 hosts 文件
 * @author xinrui.an
 * @date 2025/03/21
 */
public class HostsService {
    private static final Logger logger = Logger.getLogger(String.valueOf(HostsService.class));

    /**
     * 解析所有 URLs 的 IP 信息
     *
     * @param urls 域名列表
     * @return 解析后的 HostConfig 列表
     */
    public static List<HostConfig> resolveUrls(List<String> urls) {
        List<CompletableFuture<HostConfig>> futures = urls.stream().map(url ->
                CompletableFuture.supplyAsync(() -> getHostConfig(url)))
                .collect(Collectors.toList());

        return futures.stream().map(future -> {
            try {
                return future.get();
            } catch (InterruptedException e) {
                // 重新设置线程中断状态
                Thread.currentThread().interrupt();
                logger.warning("Thread was interrupted while resolving URL: " + e.getMessage());
                return null;
            } catch (ExecutionException e) {
                logger.warning("Execution exception while resolving URL: " + e.getMessage());
                return null;
            }
        }).filter(Objects::nonNull).collect(Collectors.toList());
    }

    /**
     * 获取单个域名的 IP 配置
     *
     * @param url 域名
     * @return IP 配置
     */
    public static HostConfig getHostConfig(String url) {
        RetryFunction<HostConfig> getConfig = () -> {
            InetAddress address = InetAddress.getByName(url);
            return new HostConfig(url, address.getHostAddress());
        };

        HostConfig config = retry(getConfig);
        if (config == null) {
            return new HostConfig(url, "");
        }
        return config;
    }

    /**
     * 重试函数，用于处理网络请求等可能失败的操作
     *
     * @param fn 需要重试的函数
     * @param <T> 函数返回值类型
     * @return 函数执行结果
     */
    private static <T> T retry(RetryFunction<T> fn) {
        for (int i = 0; i < 3; i++) {
            try {
                return fn.execute();
            } catch (Exception e) {
                logger.warning("Attempt {} failed: " + (i + 1) + e.getMessage());
            }
        }
        return null;
    }

    /**
     * 生成 hosts 文件内容
     *
     * @param configs 域名配置列表
     * @return 生成的 hosts 文件内容对象
     */
    public static HostsContent generateHosts(List<HostConfig> configs) {
        StringBuilder hostStr = new StringBuilder();
        hostStr.append("# Generated by Github Hosts start  \n\n");

        for (HostConfig config : configs) {
            if (config.getIp().isEmpty()) {
                hostStr.append("# ").append(config.getUrl()).append(" update failed\n");
            } else {
                int whiteLen = 16 - config.getIp().length();
                hostStr.append(config.getIp())
                        .append(repeatSpace(Math.max(0, whiteLen)))
                        .append(config.getUrl())
                        .append("\n");
            }
        }

        String updateTime = LocalDateTime.now(ZoneId.of("Asia/Shanghai"))
                .format(DateTimeFormatter.ofPattern("M/d/yyyy, h:mm:ss a"));

        hostStr.append("\n# Last update: ").append(updateTime).append("\n");
        hostStr.append("# Please star: https://github.com/AnXinrui/GHOSTS\n");
        hostStr.append("# Generated by Github Hosts end");

        return new HostsContent(hostStr.toString(), updateTime);
    }

    /**
     * 写入文件
     *
     * @param hosts hosts 文件内容对象
     * @throws IOException 写入文件时的 IO 异常
     */
    public static void writeHosts(HostsContent hosts) throws IOException {
        // 读取模板
        String template = new String(Files.readAllBytes(Paths.get("README.template.md")), StandardCharsets.UTF_8);

        // 替换内容
        String nextReadme = template
                .replace("{{hosts}}", hosts.getHostStr())
                .replace("{{last_update_time}}", hosts.getUpdateTime());

        // 写入文件
        Files.write(Paths.get("hosts"), hosts.getHostStr().getBytes(StandardCharsets.UTF_8));
        Files.write(Paths.get("README.md"), nextReadme.getBytes(StandardCharsets.UTF_8));
    }

    /**
     * 生成空格字符串
     *
     * @param count 空格数量
     * @return 空格字符串
     */
    private static String repeatSpace(int count) {
        StringBuilder spaces = new StringBuilder();
        for (int i = 0; i < count; i++) {
            spaces.append(" ");
        }
        return spaces.toString();
    }

    /**
     * 私有构造函数，防止实例化
     */
    private HostsService() {
        throw new UnsupportedOperationException("Utility class");
    }
}
